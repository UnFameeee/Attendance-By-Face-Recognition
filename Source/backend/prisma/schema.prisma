generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Employee {
  id String @id @default(uuid())

  // roleId 
  role   Role   @relation(fields: [roleId], references: [roleId])
  roleId String

  // organizationId
  department   Department? @relation(fields: [departmentId], references: [departmentId])
  departmentId String?

  // locationId
  location   Location? @relation(fields: [locationId], references: [locationId])
  locationId String?   @unique

  picture               String?
  fullname              String
  email                 String                @unique
  password              String
  gender                String?
  dateOfBirth           DateTime?
  phoneNumber           String?
  description           String?
  worktype              String?
  status                Boolean?
  refreshToken          String?
  deleted               Boolean               @default(false)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  deletedAt             DateTime?
  attendances           Attendance[]
  contracts             Contract[]
  workshifts            Workshift[]
  leaveRequests         LeaveRequest[]        @relation("LeaveRequests")
  leaveRequestApproveds LeaveRequest[]        @relation("LeaveRequestApproveds")
  payrolls              Payroll[]
  departmentManager     DepartmentManager[]
  employeeImages        EmployeeImage[]
  AttendanceException   AttendanceException[]
  FaceTrainingImage     FaceTrainingImage[]

  @@map("employee")
}

model EmployeeImage {
  imageId String @id @default(uuid())

  // roleId 
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String

  link      String
  // index     Int
  // isPrimary Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // deletedAt DateTime?

  @@map("employeeimage")
}

model FaceTrainingImage {
  imageId String @id @default(uuid())

  // roleId 
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String

  link      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // deletedAt DateTime?

  @@map("facetrainingimage")
}

model Role {
  roleId         String           @id @default(uuid())
  roleName       String           @unique
  displayName    String           @unique
  deleted        Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  employee       Employee[]
  rolePermission RolePermission[]

  @@map("role")
}

model Permission {
  permissionId   String           @id @default(uuid())
  permissionName String           @unique
  deleted        Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  rolePermission RolePermission[]

  @@map("permission")
}

model Resource {
  resourceId     String           @id @default(uuid())
  resourceName   String           @unique
  deleted        Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  rolePermission RolePermission[]

  @@map("resource")
}

model RolePermission {
  // roleId
  role   Role   @relation(fields: [roleId], references: [roleId])
  roleId String

  // permissionId
  permission   Permission @relation(fields: [permissionId], references: [permissionId])
  permissionId String

  // resourceId
  resource   Resource @relation(fields: [resourceId], references: [resourceId])
  resourceId String

  deleted   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([roleId, permissionId, resourceId])
  @@map("rolepermission")
}

model Location {
  locationId   String        @id @default(uuid())
  address      String?
  city         String?
  country      String?
  state        String?
  deleted      Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  organization Organization?
  department   Department?
  employee     Employee?

  @@map("location")
}

model Organization {
  organizationId   String @id @default(uuid())
  organizationName String

  // locationId
  location   Location @relation(fields: [locationId], references: [locationId])
  locationId String   @unique

  deleted     Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  departments Department[]

  @@map("organization")
}

model Department {
  departmentId   String       @id @default(uuid())
  // organizationId
  organization   Organization @relation(fields: [organizationId], references: [organizationId])
  organizationId String

  // locationId
  location   Location @relation(fields: [locationId], references: [locationId])
  locationId String   @unique

  departmentName    String
  deleted           Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  deletedAt         DateTime?
  departmentManager DepartmentManager[]
  employee          Employee[]

  @@map("department")
}

model DepartmentManager {
  // managerId   
  manager   Employee @relation(fields: [managerId], references: [id])
  managerId String

  // departmentId
  department   Department @relation(fields: [departmentId], references: [departmentId])
  departmentId String

  deleted   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([managerId, departmentId])
  @@map("departmentmanager")
}

model Attendance {
  attendanceId String @id @default(uuid())

  // EmployeeId
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String

  attendanceDate DateTime
  checkIn        DateTime?
  checkOut       DateTime?
  lateArrival    DateTime?
  earlyLeave     DateTime?
  totalHours     Float
  absent         Boolean
  note           String
  deleted        Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  @@map("attendance")
}

model Workshift {
  shiftId String @id @default(uuid())

  // EmployeeId
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String

  // shiftTypeId DateTime
  shiftType   ShiftType @relation(fields: [shiftTypeId], references: [shiftTypeId])
  shiftTypeId String

  shiftDate DateTime
  deleted   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@map("workshift")
}

model ShiftType {
  shiftTypeId String      @id @default(uuid())
  shiftName   String      @unique
  startTime   DateTime
  endTime     DateTime
  deleted     Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  workshifts  Workshift[]

  @@map("shifttype")
}

model Contract {
  contractId String    @id @default(uuid())
  // EmployeeId
  employee   Employee? @relation(fields: [employeeId], references: [id])
  employeeId String?

  startDate     DateTime
  endDate       DateTime
  jobTitle      String
  payFrequency  String
  hoursPerWeek  Int
  overTimeRate  Float
  bonuses       Float
  note          String
  deleted       Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  salaryReviews SalaryReview[]

  @@map("contract")
}

model SalaryReview {
  salaryReviewId String    @id @default(uuid())
  // contractId
  contract       Contract? @relation(fields: [contractId], references: [contractId])
  contractId     String?

  date         DateTime
  salary       Float
  reason       String
  payFrequency String
  note         String
  deleted      Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  @@map("salaryreview")
}

model LeaveRequest {
  leaveRequestId String   @id @default(uuid())
  // EmployeeId
  employee       Employee @relation("LeaveRequests", fields: [employeeId], references: [id])
  employeeId     String

  // approverId
  approver   Employee? @relation("LeaveRequestApproveds", fields: [approverId], references: [id])
  approverId String?

  // leaveTypeId
  leaveType   LeaveType @relation(fields: [leaveTypeId], references: [leaveTypeId])
  leaveTypeId String

  requestDate DateTime
  startDate   DateTime
  endDate     DateTime
  isApproved  Boolean
  reason      String
  note        String
  deleted     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  @@map("leaverequest")
}

model LeaveType {
  leaveTypeId   String         @id @default(uuid())
  name          String
  deleted       Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  leaveRequests LeaveRequest[]

  @@map("leavetype")
}

model Payroll {
  payrollId  String   @id @default(uuid())
  // EmployeeId
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String

  payDate        DateTime
  payPeriodStart DateTime
  payPeriodEnd   DateTime
  hoursWorked    Float
  hourlyRate     Float
  GrossPay       Float
  NetPay         Float
  note           String
  deleted        Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  @@map("payroll")
}

model AttendanceException {
  attendanceExceptionId String @id @default(uuid())

  //employeeId
  employee   Employee? @relation(fields: [approverId], references: [id])
  approverId String?

  image          String
  name           String
  department     String
  email          String
  attendanceType String
  datetime       DateTime
  status         String

  @@map("attendanceexception")
}

model Urlmanagement {
  URL         String   @id
  expiredTime DateTime
  isExpired   Boolean

  @@map("urlmanagement")
}